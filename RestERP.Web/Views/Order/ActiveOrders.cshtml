@model IEnumerable<Order>

@{
    ViewData["Title"] = "Aktif Siparişler";
}

@using RestERP.Domain.Entities
@using RestERP.Domain.Enums

<div class="active-orders-container">
    <div class="page-header">
        <h1>Aktif Siparişler</h1>
        <div class="divider">
            <span>✦</span>
        </div>
        <p>Restoranda şu anda aktif olan siparişleri görüntüleyin ve yönetin</p>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="no-orders-message">
            <i class="bi bi-exclamation-circle"></i>
            <p>Şu anda aktif sipariş bulunmamaktadır.</p>
            <a href="/Panel/Table" class="action-link">Masa Yönetimine Dön</a>
        </div>
    }
    else
    {
        <div class="orders-grid">
            @foreach (var order in Model)
            {
                <div class="order-card">
                    <div class="order-header">
                        <h2>Masa No: @order.TableId</h2>
                        <span class="order-number">Sipariş No: @order.OrderNumber</span>
                    </div>
                    
                    <div class="order-status">
                        <span class="status-badge @order.Status.ToString().ToLower()">@order.Status</span>
                    </div>
                    
                    <div class="order-items">
                        <h3>Sipariş Detayları</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Ürün</th>
                                    <th>Miktar</th>
                                    <th>Tutar</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in order.OrderItems)
                                {
                                    <tr>
                                        <td>@(item.Food?.TurkishName ?? "Ürün Bulunamadı")</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.TotalPrice.ToString("C2")</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="2"><strong>Toplam:</strong></td>
                                    <td><strong>@order.TotalAmount.ToString("C2")</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    
                    <div class="order-actions">
                        <a href="@Url.Action("Index", "Order", new { orderId = order.Id })" class="btn btn-details">Detaylar</a>
                        @if (order.Status != OrderStatus.Completed && order.Status != OrderStatus.Cancelled)
                        {
                            <button class="btn btn-complete" data-order-id="@order.Id" onclick="updateOrderStatus(@order.Id, 'Completed')">
                                Tamamla
                            </button>
                            <button class="btn btn-cancel" data-order-id="@order.Id" onclick="updateOrderStatus(@order.Id, 'Cancelled')">
                                İptal Et
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    body {
        font-family: 'Montserrat', sans-serif;
        background-color: #f9f6f0;
        color: #333;
        line-height: 1.6;
    }

    .active-orders-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 20px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .page-header h1 {
        font-size: 2.2rem;
        font-weight: 600;
        color: #4a3c2e;
        margin-bottom: 8px;
        font-family: 'Lora', serif;
        letter-spacing: 1px;
    }

    .page-header p {
        color: #8c7762;
        font-size: 1.1rem;
        margin-top: 10px;
    }

    .divider {
        display: flex;
        align-items: center;
        margin: 12px auto;
        max-width: 300px;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: linear-gradient(to right, transparent, #d2c4af, transparent);
    }

    .divider span {
        padding: 0 15px;
        color: #b09a7b;
        font-size: 1.2rem;
    }

    .no-orders-message {
        text-align: center;
        padding: 50px 20px;
        background-color: #f1eadd;
        border-radius: 8px;
        margin: 20px 0;
    }

    .no-orders-message i {
        font-size: 3rem;
        color: #b09a7b;
        margin-bottom: 15px;
    }

    .no-orders-message p {
        font-size: 1.2rem;
        color: #5d4b38;
        margin-bottom: 20px;
    }

    .action-link {
        display: inline-block;
        padding: 10px 25px;
        background-color: #5d4b38;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        font-weight: 500;
        transition: background-color 0.3s;
    }

    .action-link:hover {
        background-color: #4a3c2e;
    }

    .orders-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
    }

    .order-card {
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }

    .order-card:hover {
        transform: translateY(-5px);
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #f8f4ec;
        border-bottom: 1px solid #e0d8c8;
    }

    .order-header h2 {
        color: #444;
        font-size: 20px;
        margin: 0 0 5px 0;
    }

    .order-number {
        font-weight: 600;
        color: #5d4b38;
    }

    .order-status {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .status-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 600;
    }

    .status-badge.new {
        background-color: #e3f2fd;
        color: #1976d2;
    }

    .status-badge.inprogress {
        background-color: #fff3e0;
        color: #f57c00;
    }

    .status-badge.ready {
        background-color: #e8f5e9;
        color: #388e3c;
    }

    .order-items {
        padding: 15px;
    }

    .order-items h3 {
        font-size: 1rem;
        color: #5d4b38;
        margin-bottom: 10px;
        font-weight: 600;
    }

    .order-items table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    .order-items th,
    .order-items td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #f1eadd;
    }

    .order-items th {
        font-weight: 600;
        color: #444;
    }

    .order-items td {
        color: #666;
    }

    .order-items tfoot td {
        font-weight: 600;
        color: #444;
    }

    .order-actions {
        display: flex;
        padding: 15px;
        background-color: #f8f4ec;
        justify-content: space-between;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .btn-details {
        background-color: #e3f2fd;
        color: #1976d2;
        text-decoration: none;
    }

    .btn-complete {
        background-color: #e8f5e9;
        color: #388e3c;
    }

    .btn-cancel {
        background-color: #ffebee;
        color: #d32f2f;
    }

    .btn:hover {
        opacity: 0.9;
    }

    @@media (max-width: 768px) {
        .active-orders-container {
            margin: 20px;
            padding: 15px;
        }

        .orders-grid {
            grid-template-columns: 1fr;
        }

        .order-items {
            overflow-x: auto;
        }
    }
</style>

<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400&family=Montserrat:wght@300;400;500;600&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

<script>
    function updateOrderStatus(orderId, status) {
        if (!confirm(`Siparişi ${status === 'Completed' ? 'tamamlamak' : 'iptal etmek'} istediğinize emin misiniz?`)) {
            return;
        }

        fetch(`/api/orders/${orderId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ status: status })
        })
        .then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                throw new Error('Sipariş durumu güncellenirken bir hata oluştu');
            }
        })
        .catch(error => {
            alert(error.message);
        });
    }
</script>

@functions {
    string GetStatusText(RestERP.Domain.Enums.OrderStatus status)
    {
        switch (status)
        {
            case RestERP.Domain.Enums.OrderStatus.New:
                return "Yeni";
            case RestERP.Domain.Enums.OrderStatus.InProgress:
                return "Hazırlanıyor";
            case RestERP.Domain.Enums.OrderStatus.Ready:
                return "Hazır";
            case RestERP.Domain.Enums.OrderStatus.Completed:
                return "Tamamlandı";
            case RestERP.Domain.Enums.OrderStatus.Cancelled:
                return "İptal Edildi";
            default:
                return status.ToString();
        }
    }
} 