@model IEnumerable<RestERP.Domain.Entities.Order>

@{
    ViewData["Title"] = "Aktif Siparişler";
    var groupedOrders = Model?.GroupBy(o => o.TableId).OrderBy(g => g.Key) ?? Enumerable.Empty<IGrouping<int?, Order>>();
}

@using RestERP.Domain.Entities
@using RestERP.Domain.Enums

<div class="order-details-container">
    <div class="page-header">
        <h1>Aktif Siparişler</h1>
        <div class="divider">
            <span>✦</span>
        </div>
        <p>Restoranda şu anda aktif olan siparişleri görüntüleyin ve yönetin</p>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="no-order-message">
            <i class="bi bi-exclamation-circle"></i>
            <p>Şu anda aktif sipariş bulunmamaktadır.</p>
            <a href="/Table/Index" class="action-link">Masa Yönetimine Dön</a>
        </div>
    }
    else
    {
        <div class="orders-grid">
            @foreach (var group in groupedOrders)
            {
                <div class="order-card">
                    <div class="order-header">
                        <h2>MASA @group.Key</h2>
                    </div>
                    @foreach (var order in group)
                    {
                        <div class="order-details">
                            <div class="order-info">
                                <div class="info-row">
                                    <div class="info-item">
                                        <span class="label">Sipariş No:</span>
                                        <span class="value">@order.OrderNumber</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="label">Durum:</span>
                                        <span class="value status-badge @order.Status.ToString().ToLower()">@GetStatusText(order.Status)</span>
                                    </div>
                                </div>
                            </div>

                            <div class="order-items">
                                <h3>Sipariş Kalemleri</h3>
                                <table class="items-table">
                                    <thead>
                                        <tr>
                                            <th>Ürün</th>
                                            <th>Miktar</th>
                                            <th>Birim Fiyat</th>
                                            <th>Toplam</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <tr>
                                                <td>@(item.Food?.Name ?? "Ürün Bulunamadı")</td>
                                                <td>@item.Quantity</td>
                                                <td>@item.UnitPrice.ToString("C2")</td>
                                                <td>@item.TotalPrice.ToString("C2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="3" class="total-label">Toplam Tutar:</td>
                                            <td class="total-amount">@order.TotalAmount.ToString("C2")</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>

                            <div class="order-actions">
                                <a href="/Order/Index?orderId=@order.Id" class="action-button details-button">
                                    <i class="bi bi-eye"></i>
                                    Detayları Görüntüle
                                </a>
                                @if (!order.IsPaid)
                                {
                                    <button class="action-button pay-button" onclick="updateOrderStatus(@order.Id, 'Completed')">
                                        <i class="bi bi-credit-card"></i>
                                        Ödeme Al
                                    </button>
                                }
                                @if (order.Status != OrderStatus.Completed && order.Status != OrderStatus.Cancelled)
                                {
                                    <button class="action-button complete-button" onclick="updateOrderStatus(@order.Id, 'Completed')">
                                        <i class="bi bi-check-circle"></i>
                                        Tamamla
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<style>
    .order-details-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 20px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .page-header h1 {
        font-size: 2.2rem;
        color: #5d4b38;
        margin-bottom: 10px;
    }

    .page-header p {
        color: #8c7762;
        font-size: 1.1rem;
    }

    .divider {
        display: flex;
        align-items: center;
        margin: 15px 0;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: linear-gradient(to right, transparent, #d2c4af, transparent);
    }

    .divider span {
        padding: 0 15px;
        color: #b09a7b;
    }

    .orders-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
        gap: 30px;
        margin-bottom: 30px;
    }

    .order-card {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .order-header {
        background-color: #f8f4ec;
        padding: 20px;
        border-bottom: 1px solid #e5e0d5;
    }

    .order-header h2 {
        margin: 0;
        color: #5d4b38;
        font-size: 1.5rem;
    }

    .order-details {
        padding: 20px;
    }

    .order-info {
        background-color: #f8f4ec;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
    }

    .info-row {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 15px;
    }

    .info-item {
        flex: 1;
        min-width: 200px;
    }

    .label {
        font-weight: 600;
        color: #8c7762;
        margin-right: 10px;
    }

    .value {
        color: #5d4b38;
    }

    .status-badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 500;
        text-transform: uppercase;
    }

    .new {
        background-color: #e3f2fd;
        color: #1976d2;
    }

    .inprogress {
        background-color: #fff3e0;
        color: #f57c00;
    }

    .completed {
        background-color: #e8f5e9;
        color: #388e3c;
    }

    .cancelled {
        background-color: #ffebee;
        color: #d32f2f;
    }

    .ready {
        background-color: #f3e5f5;
        color: #7b1fa2;
    }

    .order-items {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        overflow: hidden;
        margin-bottom: 20px;
    }

    .order-items h3 {
        padding: 15px 20px;
        margin: 0;
        color: #5d4b38;
        border-bottom: 1px solid #eee;
        font-size: 1.2rem;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
    }

    .items-table th {
        background-color: #f8f4ec;
        color: #8c7762;
        font-weight: 600;
        text-align: left;
        padding: 12px 20px;
    }

    .items-table td {
        padding: 12px 20px;
        border-bottom: 1px solid #eee;
        color: #5d4b38;
    }

    .items-table tfoot td {
        background-color: #f8f4ec;
        font-weight: 600;
    }

    .total-label {
        text-align: right;
        color: #8c7762;
    }

    .total-amount {
        color: #5d4b38;
        font-size: 1.1rem;
    }

    .order-actions {
        padding: 1.5rem;
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        background: #f8f4ed;
        border-top: 1px solid #e2d7c7;
    }

    .action-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        color: white;
    }

    .details-button {
        background-color: #5c6bc0;
    }

    .details-button:hover {
        background-color: #3f51b5;
        color: white;
    }

    .pay-button {
        background-color: #4caf50;
    }

    .pay-button:hover {
        background-color: #43a047;
        color: white;
    }

    .complete-button {
        background-color: #ff9800;
    }

    .complete-button:hover {
        background-color: #f57c00;
        color: white;
    }

    .no-order-message {
        text-align: center;
        padding: 40px;
        background-color: #f8f4ec;
        border-radius: 12px;
        margin: 20px 0;
    }

    .no-order-message i {
        font-size: 2rem;
        color: #8c7762;
        margin-bottom: 15px;
    }

    .no-order-message p {
        color: #5d4b38;
        margin-bottom: 20px;
        font-size: 1.1rem;
    }

    .action-link {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 10px 20px;
        background-color: #8c7762;
        color: white;
        text-decoration: none;
        border-radius: 6px;
        transition: background-color 0.3s;
    }

    .action-link:hover {
        background-color: #6a563d;
        color: white;
    }

    @@media (max-width: 768px) {
        .order-details-container {
            margin: 20px;
            padding: 15px;
        }

        .orders-grid {
            grid-template-columns: 1fr;
        }

        .info-item {
            min-width: 100%;
        }

        .items-table {
            display: block;
            overflow-x: auto;
        }

        .order-actions {
            flex-direction: column;
        }

        .action-button {
            width: 100%;
            justify-content: center;
        }
    }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css">

<script>
    async function updateOrderStatus(orderId, status) {
        if (!confirm(`Siparişi ${status === 'Completed' ? 'tamamlamak' : 'iptal etmek'} istediğinize emin misiniz?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/orders/${orderId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: status })
            });

            if (response.ok) {
                location.reload();
            } else {
                alert('Sipariş durumu güncellenirken bir hata oluştu.');
            }
        } catch (error) {
            console.error('Sipariş durumu güncelleme hatası:', error);
            alert('Sipariş durumu güncellenirken bir hata oluştu.');
        }
    }
</script>

@functions {
    string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.New => "Yeni",
            OrderStatus.InProgress => "Hazırlanıyor",
            OrderStatus.Ready => "Hazır",
            OrderStatus.Completed => "Tamamlandı",
            OrderStatus.Cancelled => "İptal Edildi",
            _ => status.ToString()
        };
    }
} 