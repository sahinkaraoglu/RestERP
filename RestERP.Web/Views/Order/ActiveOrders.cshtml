@model IEnumerable<Order>

@{
    ViewData["Title"] = "Aktif Siparişler";
    var groupedOrders = Model.GroupBy(o => o.TableId).OrderBy(g => g.Key);
}

@using RestERP.Domain.Entities
@using RestERP.Domain.Enums

<div class="active-orders-container">
    <div class="page-header">
        <h1>Aktif Siparişler</h1>
        <div class="divider">
            <span>✦</span>
        </div>
        <p>Restoranda şu anda aktif olan siparişleri görüntüleyin ve yönetin</p>
    </div>

    @if (!Model.Any())
    {
        <div class="no-orders-message">
            <i class="bi bi-exclamation-circle"></i>
            <p>Şu anda aktif sipariş bulunmamaktadır.</p>
            <a href="/Table/Index" class="action-link">Masa Yönetimine Dön</a>
        </div>
    }
    else
    {
        <div class="orders-grid">
            @foreach (var group in groupedOrders)
            {
                var masaToplam = group.Sum(o => o.TotalAmount);
                <div class="table-orders-card">
                    <div class="table-header">
                        <h2>MASA @group.Key</h2>
                        <div class="table-total">
                            <span>Masa Toplamı:</span>
                            <strong>@masaToplam.ToString("C2")</strong>
                        </div>
                    </div>
                    
                    <div class="table-actions">
                        <a href="/Order/Checkout?tableId=@group.Key" class="btn btn-danger btn-lg">
                            <i class="bi bi-cash"></i> Hesap Kapat
                        </a>
                    </div>
                    
                    @foreach (var order in group)
                    {
                        <div class="order-card">
                            <div class="order-header">
                                <span class="order-number">Sipariş No: @order.OrderNumber</span>
                                <span class="status-badge @order.Status.ToString().ToLower()">@order.Status</span>
                            </div>
                            
                            <div class="order-items">
                                <h3>Sipariş Detayları</h3>
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Ürün</th>
                                            <th>Miktar</th>
                                            <th>Tutar</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <tr>
                                                <td>@(item.Food?.TurkishName ?? "Ürün Bulunamadı")</td>
                                                <td>@item.Quantity</td>
                                                <td>@item.TotalPrice.ToString("C2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="2"><strong>Toplam:</strong></td>
                                            <td><strong>@order.TotalAmount.ToString("C2")</strong></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                            
                            <div class="order-actions">
                                <a href="/Order/ViewOrder?tableId=@order.TableId" class="btn btn-primary">
                                    <i class="bi bi-eye"></i> Görüntüle
                                </a>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<style>
    .active-orders-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 20px;
    }
    
    .page-header {
        text-align: center;
        margin-bottom: 40px;
    }
    
    .page-header h1 {
        font-size: 2.2rem;
        color: #5d4b38;
        margin-bottom: 10px;
    }
    
    .divider {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 15px 0;
        color: #b09a7b;
    }
    
    .page-header p {
        color: #8c7762;
        font-size: 1.1rem;
    }
    
    .no-orders-message {
        text-align: center;
        padding: 40px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .no-orders-message i {
        font-size: 3rem;
        color: #b09a7b;
        margin-bottom: 20px;
    }
    
    .no-orders-message p {
        color: #5d4b38;
        font-size: 1.2rem;
        margin-bottom: 20px;
    }
    
    .action-link {
        display: inline-block;
        padding: 10px 20px;
        background: #5d4b38;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    
    .action-link:hover {
        background: #4a3c2e;
        color: white;
    }
    
    .orders-grid {
        display: grid;
        gap: 30px;
    }
    
    .table-orders-card {
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
    }
    
    .table-header {
        background: linear-gradient(135deg, #5d4b38, #b09a7b);
        color: white;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .table-header h2 {
        margin: 0;
        font-size: 1.5rem;
    }
    
    .table-total {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .table-total strong {
        font-size: 1.2rem;
    }
    
    .order-card {
        padding: 20px;
        border-bottom: 1px solid #eee;
    }
    
    .order-card:last-child {
        border-bottom: none;
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .order-number {
        font-weight: 500;
        color: #5d4b38;
    }
    
    .status-badge {
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.9rem;
        font-weight: 500;
    }
    
    .status-badge.new {
        background: #2196F3;
        color: white;
    }
    
    .status-badge.inprogress {
        background: #FF9800;
        color: white;
    }
    
    .status-badge.ready {
        background: #4CAF50;
        color: white;
    }
    
    .order-items {
        margin: 20px 0;
    }
    
    .order-items h3 {
        color: #5d4b38;
        font-size: 1.2rem;
        margin-bottom: 15px;
    }
    
    .order-items table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .order-items th,
    .order-items td {
        padding: 10px;
        text-align: left;
        border-bottom: 1px solid #eee;
    }
    
    .order-items th {
        background: #f9f7f4;
        color: #5d4b38;
        font-weight: 500;
    }
    
    .order-items tfoot td {
        border-bottom: none;
        padding-top: 15px;
    }
    
    .order-actions {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }
    
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s;
    }
    
    .btn i {
        font-size: 1.1rem;
    }
    
    .btn-primary {
        background: #2196F3;
        color: white;
    }
    
    .btn-primary:hover {
        background: #1E88E5;
        color: white;
    }
    
    .btn-danger {
        background: #FF5722;
        color: white;
    }
    
    .btn-danger:hover {
        background: #F4511E;
        color: white;
    }
    
    .table-actions {
        padding: 20px;
        display: flex;
        justify-content: flex-end;
        border-bottom: 1px solid #eee;
    }
    
    .btn-lg {
        padding: 12px 24px;
        font-size: 1.1rem;
    }
    
    @@media (max-width: 768px) {
        .table-header {
            flex-direction: column;
            gap: 10px;
            text-align: center;
        }
        
        .table-actions {
            justify-content: center;
        }
        
        .order-header {
            flex-direction: column;
            gap: 10px;
            text-align: center;
        }
        
        .order-actions {
            flex-direction: column;
        }
        
        .btn {
            width: 100%;
            justify-content: center;
        }
        
        .order-items {
            overflow-x: auto;
        }
        
        .order-items table {
            min-width: 500px;
        }
    }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css">

<script>
    function updateOrderStatus(orderId, status) {
        if (!confirm(`Siparişi ${status === 'Completed' ? 'tamamlamak' : 'iptal etmek'} istediğinize emin misiniz?`)) {
            return;
        }

        fetch(`/api/orders/${orderId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ status: status })
        })
        .then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                throw new Error('Sipariş durumu güncellenirken bir hata oluştu');
            }
        })
        .catch(error => {
            alert(error.message);
        });
    }
</script>

@functions {
    string GetStatusText(RestERP.Domain.Enums.OrderStatus status)
    {
        switch (status)
        {
            case RestERP.Domain.Enums.OrderStatus.New:
                return "Yeni";
            case RestERP.Domain.Enums.OrderStatus.InProgress:
                return "Hazırlanıyor";
            case RestERP.Domain.Enums.OrderStatus.Ready:
                return "Hazır";
            case RestERP.Domain.Enums.OrderStatus.Completed:
                return "Tamamlandı";
            case RestERP.Domain.Enums.OrderStatus.Cancelled:
                return "İptal Edildi";
            default:
                return status.ToString();
        }
    }
} 