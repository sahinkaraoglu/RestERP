@model IEnumerable<Order>

@{
    ViewData["Title"] = "Tüm Siparişler";
}

@using RestERP.Application.Services.Interfaces
@using RestERP.Core.Doman.Entities
@using RestERP.Domain.Enums
@using RestERP.Infrastructure.Data.SeedData
@inject IUserService UserService
@inject IFoodService FoodService

<div class="order-details-container">
    <div class="page-header">
        <h1>@ViewData["Title"]</h1>
        <div class="divider">
            <span>✦</span>
        </div>
    </div>

    @if (!User.Identity.IsAuthenticated)
    {
        <div class="no-order-message">
            <i class="bi bi-shield-lock"></i>
            <p>Siparişleri görüntüleyebilmek için giriş yapmanız gerekmektedir.</p>
            <div class="auth-buttons">
                <a href="/Identity/Account/Login" class="action-button login-button">
                    <i class="bi bi-box-arrow-in-right"></i>
                    Giriş Yap
                </a>
                <a href="/Identity/Account/Register" class="action-button register-button">
                    <i class="bi bi-person-plus"></i>
                    Kayıt Ol
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="filter-section">
            <form method="get" action="@Url.Action("Index")" class="filter-form">
                <div class="form-group">
                    <label for="tableId">Masa Filtresi:</label>
                    <select name="tableId" id="tableId" class="form-control" onchange="this.form.submit()">
                        <option value="">Tüm Masalar</option>
                        @foreach (var table in ViewBag.Tables)
                        {
                            var isSelected = ViewBag.SelectedTableId == table.Id;
                            <option value="@table.Id" selected="@isSelected">
                                Masa @table.Id
                            </option>
                        }
                    </select>
                </div>
            </form>
        </div>

        @if (Model == null || !Model.Any())
        {
            <div class="no-order-message">
                <i class="bi bi-exclamation-circle"></i>
                <p>Henüz sipariş verilmemiş.</p>
                <a href="/Menu" class="action-link">
                    <i class="bi bi-journal-text"></i>
                    Menüyü Görüntüle
                </a>
            </div>
        }
        else
        {
            <div class="orders-grid">
                @foreach (var order in Model.OrderByDescending(o => o.OrderDate))
                {
                    <div class="order-card">
                        <div class="order-header">
                            <div class="order-info">
                                <div class="info-row">
                                    <div class="info-item">
                                        <span class="label">Sipariş No:</span>
                                        <span class="value">@order.OrderNumber</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="label">Masa No:</span>
                                        <span class="value">@order.TableId</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="label">Tarih:</span>
                                        <span class="value">@order.OrderDate.ToString("dd.MM.yyyy HH:mm")</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="label">Durum:</span>
                                        <span class="value status-badge @order.Status.ToString().ToLower()">@GetStatusText(order.Status)</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="order-items">
                            <h3>Sipariş Kalemleri</h3>
                            <table class="items-table">
                                <thead>
                                    <tr>
                                        <th>Ürün</th>
                                        <th>Miktar</th>
                                        <th>Birim Fiyat</th>
                                        <th>Toplam</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <tr>
                                            <td>@(item.Food?.TurkishName ?? "Ürün Bulunamadı")</td>
                                            <td>@item.Quantity</td>
                                            <td>@item.UnitPrice.ToString("C2")</td>
                                            <td>@item.TotalPrice.ToString("C2")</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="3" class="total-label">Toplam Tutar:</td>
                                        <td class="total-amount">@order.TotalAmount.ToString("C2")</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

<style>
    .order-details-container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fffcf7;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        border: 1px solid #f0e9df;
    }

    .page-header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px;
        background-color: #f8f4ec;
        border-radius: 8px;
        border: 1px solid #e5e0d5;
    }

    .page-header h1 {
        color: #5d4b38;
        font-size: 2.5rem;
        margin-bottom: 10px;
        font-weight: 600;
    }

    .divider {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 15px auto;
        max-width: 300px;
        position: relative;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: linear-gradient(to right, transparent, #d2c4af, transparent);
    }

    .divider span {
        padding: 0 15px;
        color: #b09a7b;
        font-size: 1.2rem;
    }

    .filter-section {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f8f4ec;
        border-radius: 8px;
        border: 1px solid #e5e0d5;
    }

    .filter-form {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .form-group {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .form-group label {
        font-weight: 500;
        color: #5d4b38;
        margin: 0;
    }

    .form-control {
        padding: 8px 12px;
        border: 1px solid #e5e0d5;
        border-radius: 4px;
        font-size: 1rem;
        min-width: 200px;
        background-color: #fff;
        color: #5d4b38;
    }

    .form-control:focus {
        outline: none;
        border-color: #b09a7b;
        box-shadow: 0 0 0 2px rgba(176, 154, 123, 0.1);
    }

    .orders-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .order-card {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        padding: 20px;
        transition: transform 0.2s;
        border: 1px solid #e5e0d5;
    }

    .order-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .order-header {
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 1px solid #e5e0d5;
    }

    .order-info {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .info-row {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .info-item {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .label {
        font-size: 0.9rem;
        color: #8c7762;
    }

    .value {
        font-weight: 500;
        color: #5d4b38;
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .status-badge.new { background-color: #e3f2fd; color: #1976d2; }
    .status-badge.preparing { background-color: #fff3e0; color: #f57c00; }
    .status-badge.ready { background-color: #e8f5e9; color: #388e3c; }
    .status-badge.completed { background-color: #f5f5f5; color: #616161; }
    .status-badge.cancelled { background-color: #ffebee; color: #d32f2f; }

    .order-items {
        margin-top: 15px;
    }

    .order-items h3 {
        font-size: 1.2rem;
        color: #5d4b38;
        margin-bottom: 10px;
        font-weight: 600;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        background-color: #fff;
        border: 1px solid #e5e0d5;
        border-radius: 4px;
        overflow: hidden;
    }

    .items-table th,
    .items-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e5e0d5;
    }

    .items-table th {
        background-color: #f8f4ec;
        font-weight: 500;
        color: #5d4b38;
    }

    .items-table td {
        color: #5d4b38;
    }

    .total-label {
        font-weight: 500;
        text-align: right;
        color: #5d4b38;
    }

    .total-amount {
        font-weight: 600;
        color: #b09a7b;
    }

    .no-order-message {
        text-align: center;
        padding: 40px 20px;
        background-color: #f8f4ec;
        border-radius: 8px;
        margin: 20px 0;
        border: 1px solid #e5e0d5;
    }

    .no-order-message i {
        font-size: 3rem;
        color: #b09a7b;
        margin-bottom: 15px;
    }

    .no-order-message p {
        color: #5d4b38;
        font-size: 1.1rem;
        margin-bottom: 20px;
    }

    .auth-buttons {
        display: flex;
        gap: 15px;
        justify-content: center;
    }

    .action-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 10px 20px;
        border-radius: 6px;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.2s;
    }

    .login-button {
        background-color: #b09a7b;
        color: white;
    }

    .register-button {
        background-color: #f8f4ec;
        color: #5d4b38;
        border: 1px solid #e5e0d5;
    }

    .action-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .action-link {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        color: #b09a7b;
        text-decoration: none;
        font-weight: 500;
    }

    .action-link:hover {
        text-decoration: underline;
    }

    @@media (max-width: 768px) {
        .filter-form {
            flex-direction: column;
            align-items: stretch;
        }

        .form-group {
            flex-direction: column;
            align-items: stretch;
        }

        .form-control {
            width: 100%;
        }

        .order-details-container {
            margin: 10px;
            padding: 15px;
        }

        .page-header {
            padding: 15px;
        }

        .page-header h1 {
            font-size: 2rem;
        }

        .info-item {
            min-width: 100%;
        }
    }
</style>

@functions {
    public string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.New => "Yeni",
            OrderStatus.Ready => "Hazır",
            OrderStatus.Completed => "Tamamlandı",
            OrderStatus.Cancelled => "İptal Edildi",
            _ => status.ToString()
        };
    }
}

