@model Order

@{
    ViewData["Title"] = "Sipariş Detayları";
}

@using RestERP.Infrastructure.Data.SeedData
@using RestERP.Domain.Entities
@using RestERP.Domain.Enums
@using RestERP.Application.Services.Interfaces
@inject IFoodService FoodService

<div class="order-details-container">
    <div class="order-header">
        <h1>Sipariş Detayları</h1>
        <div class="divider">
            <span>✦</span>
        </div>
    </div>

    @if (Model != null)
    {
        <div class="order-info">
            <h2>Masa No: @Model.TableId</h2>
            <p>Sipariş No: @Model.OrderNumber</p>
            <p>Durum: @Model.Status</p>
            <p>Toplam Tutar: @Model.TotalAmount.ToString("C2")</p>
        </div>

        <div class="order-items">
            <h3>Sipariş Kalemleri</h3>
            <table class="items-table">
                <thead>
                    <tr>
                        <th>Ürün</th>
                        <th>Miktar</th>
                        <th>Birim Fiyat</th>
                        <th>Toplam</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderItems)
                    {
                        <tr>
                            <td>@(item.Food?.TurkishName ?? "Ürün Bulunamadı")</td>
                            <td>@item.Quantity</td>
                            <td>@item.UnitPrice.ToString("C2")</td>
                            <td>@item.TotalPrice.ToString("C2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="no-order">
            <p>Sipariş bulunamadı.</p>
        </div>
    }
</div>

<style>
    .order-details-container {
        max-width: 800px;
        margin: 40px auto;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-radius: 8px;
    }

    .order-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .order-header h1 {
        color: #333;
        font-size: 24px;
        margin-bottom: 10px;
    }

    .divider {
        display: flex;
        align-items: center;
        margin: 15px 0;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: #ddd;
    }

    .divider span {
        padding: 0 15px;
        color: #666;
    }

    .order-info {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 6px;
        margin-bottom: 20px;
    }

    .order-info h2 {
        color: #444;
        font-size: 20px;
        margin-bottom: 15px;
    }

    .order-info p {
        color: #666;
        margin: 8px 0;
    }

    .order-items {
        margin-top: 30px;
    }

    .order-items h3 {
        color: #444;
        font-size: 18px;
        margin-bottom: 15px;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
    }

    .items-table th,
    .items-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .items-table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #444;
    }

    .items-table td {
        color: #666;
    }

    .no-order {
        text-align: center;
        padding: 40px;
        color: #666;
    }

    @@media (max-width: 768px) {
        .order-details-container {
            margin: 20px;
            padding: 15px;
        }

        .items-table {
            display: block;
            overflow-x: auto;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const completeOrderBtn = document.getElementById('completeOrderBtn');
        const cancelOrderBtn = document.getElementById('cancelOrderBtn');
        
        if (completeOrderBtn) {
            completeOrderBtn.addEventListener('click', function() {
                if (confirm('Siparişi tamamlamak istediğinize emin misiniz?')) {
                    const orderId = this.getAttribute('data-order-id');
                    updateOrderStatus(orderId, 'Completed');
                }
            });
        }
        
        if (cancelOrderBtn) {
            cancelOrderBtn.addEventListener('click', function() {
                if (confirm('Siparişi iptal etmek istediğinize emin misiniz?')) {
                    const orderId = this.getAttribute('data-order-id');
                    updateOrderStatus(orderId, 'Cancelled');
                }
            });
        }
        
        function updateOrderStatus(orderId, status) {
            fetch(`/api/orders/${orderId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: status })
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    throw new Error('Sipariş durumu güncellenirken bir hata oluştu');
                }
            })
            .catch(error => {
                alert(error.message);
            });
        }
    });
</script>
