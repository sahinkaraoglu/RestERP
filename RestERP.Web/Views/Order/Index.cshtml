@model RestERP.Domain.Entities.Order

@{
    ViewData["Title"] = "Sipariş Detayları";
}

@using RestERP.Infrastructure.Data.SeedData
@using RestERP.Domain.Entities
@using RestERP.Domain.Enums

<div class="order-details-container">
    <div class="order-header">
        <h1>Sipariş Detayları</h1>
        <div class="divider">
            <span>✦</span>
        </div>
        <h2>Masa No: @Model.TableId</h2>
        <p>Sipariş No: @Model.OrderNumber</p>
        <p>Sipariş Tarihi: @Model.OrderDate.ToString("dd.MM.yyyy HH:mm")</p>
    </div>

    @if (Model.Status != OrderStatus.Completed)
    {
        <div class="order-status-message">
            <div class="status-badge @Model.Status.ToString().ToLower()">
                @(Model.Status switch {
                    OrderStatus.New => "Yeni Sipariş",
                    OrderStatus.InProgress => "Hazırlanıyor",
                    OrderStatus.Ready => "Servise Hazır",
                    _ => Model.Status.ToString()
                })
            </div>
        </div>
    }

    <div class="order-content">
        <table class="order-items-table">
            <thead>
                <tr>
                    <th>Ürün</th>
                    <th>Miktar</th>
                    <th>Birim Fiyat</th>
                    <th>Toplam</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.OrderItems)
                {
                    <tr>
                        <td>@item.Food?.Name</td>
                        <td>@item.Quantity</td>
                        <td>@item.UnitPrice.ToString("N2") ₺</td>
                        <td>@item.TotalPrice.ToString("N2") ₺</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="order-summary">
            <div class="summary-item">
                <span>Ara Toplam:</span>
                <span>@Model.TotalAmount.ToString("N2") ₺</span>
            </div>
            <div class="summary-item">
                <span>KDV (%8):</span>
                <span>@((Model.TotalAmount * 0.08m).ToString("N2")) ₺</span>
            </div>
            <div class="summary-item total">
                <span>Genel Toplam:</span>
                <span>@((Model.TotalAmount * 1.08m).ToString("N2")) ₺</span>
            </div>
        </div>
    </div>

    <div class="order-actions">
        @if (Model.Status == OrderStatus.Completed)
        {
            <div class="completed-message">Bu sipariş tamamlanmıştır</div>
        }
        else
        {
            <button id="completeOrderBtn" class="complete-button" data-order-id="@Model.Id">Siparişi Tamamla</button>
            <button id="cancelOrderBtn" class="cancel-button" data-order-id="@Model.Id">Siparişi İptal Et</button>
        }
        <a href="/Table/Index" class="return-button">Masa Yönetimine Dön</a>
    </div>
</div>

<style>
    .order-details-container {
        max-width: 1000px;
        margin: 40px auto;
        padding: 20px;
    }
    
    .order-header {
        text-align: center;
        margin-bottom: 30px;
    }
    
    .order-header h1 {
        color: #5d4b38;
        margin-bottom: 10px;
    }
    
    .divider {
        text-align: center;
        margin: 15px 0;
    }
    
    .divider span {
        color: #8c7762;
        font-size: 1.5em;
    }
    
    .order-status-message {
        text-align: center;
        margin: 20px 0;
    }
    
    .status-badge {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 500;
    }
    
    .status-badge.new {
        background-color: #e3f2fd;
        color: #1976d2;
    }
    
    .status-badge.inprogress {
        background-color: #fff3e0;
        color: #f57c00;
    }
    
    .status-badge.ready {
        background-color: #e8f5e9;
        color: #388e3c;
    }
    
    .order-items-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
    }
    
    .order-items-table th,
    .order-items-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    
    .order-items-table th {
        background-color: #f5f5f5;
        font-weight: 500;
    }
    
    .order-summary {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
    }
    
    .summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }
    
    .summary-item.total {
        font-weight: bold;
        font-size: 1.2em;
        margin-top: 15px;
        padding-top: 15px;
        border-top: 2px solid #ddd;
    }
    
    .order-actions {
        margin-top: 30px;
        text-align: center;
    }
    
    .complete-button,
    .cancel-button,
    .return-button {
        padding: 10px 20px;
        margin: 0 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.3s;
    }
    
    .complete-button {
        background-color: #4caf50;
        color: white;
    }
    
    .complete-button:hover {
        background-color: #388e3c;
    }
    
    .cancel-button {
        background-color: #f44336;
        color: white;
    }
    
    .cancel-button:hover {
        background-color: #d32f2f;
    }
    
    .return-button {
        background-color: #5d4b38;
        color: white;
        text-decoration: none;
        display: inline-block;
    }
    
    .return-button:hover {
        background-color: #4a3c2d;
        color: white;
    }
    
    .completed-message {
        color: #4caf50;
        font-weight: 500;
        margin-bottom: 20px;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const completeOrderBtn = document.getElementById('completeOrderBtn');
        const cancelOrderBtn = document.getElementById('cancelOrderBtn');
        
        if (completeOrderBtn) {
            completeOrderBtn.addEventListener('click', function() {
                if (confirm('Siparişi tamamlamak istediğinize emin misiniz?')) {
                    const orderId = this.getAttribute('data-order-id');
                    updateOrderStatus(orderId, 'Completed');
                }
            });
        }
        
        if (cancelOrderBtn) {
            cancelOrderBtn.addEventListener('click', function() {
                if (confirm('Siparişi iptal etmek istediğinize emin misiniz?')) {
                    const orderId = this.getAttribute('data-order-id');
                    updateOrderStatus(orderId, 'Cancelled');
                }
            });
        }
        
        function updateOrderStatus(orderId, status) {
            fetch(`/api/orders/${orderId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: status })
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    throw new Error('Sipariş durumu güncellenirken bir hata oluştu');
                }
            })
            .catch(error => {
                alert(error.message);
            });
        }
    });
</script>
