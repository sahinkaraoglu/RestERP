// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestERP.Infrastructure.Context;

#nullable disable

namespace RestERP.Infrastructure.Migrations
{
    [DbContext(typeof(RestERPDbContext))]
    [Migration("20251031135318_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TurkishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Çeşitli peynirler, zeytinler, domatesler, salatalıklar ve ekmeklerle servis edilen geleneksel bir Türk kahvaltısı.",
                            IsDeleted = false,
                            Name = "Turkish Breakfast Spread",
                            Price = 200m,
                            TurkishName = "Kahvaltı Tabağı"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Kişi başı serpme usulü sunulan zengin kahvaltı tabağı. Çeşitli peynirler, reçeller, bal, kaymak ve diğer kahvaltılıklar içerir.",
                            IsDeleted = false,
                            Name = "Mixed Breakfast (Per Person)",
                            Price = 300m,
                            TurkishName = "Serpme Kahvaltı"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Çeşitli yerel ve ithal peynirlerden oluşan seçki. Taze ekmek ile servis edilir.",
                            IsDeleted = false,
                            Name = "Cheese Platter",
                            Price = 70m,
                            TurkishName = "Peynir Tabağı"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Farklı yörelerden toplanmış yeşil ve siyah zeytinler.",
                            IsDeleted = false,
                            Name = "Olive Platter",
                            Price = 47.50m,
                            TurkishName = "Zeytin Tabağı"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Taze yumurtalardan hazırlanan sade omlet.",
                            IsDeleted = false,
                            Name = "Omelette",
                            Price = 47.50m,
                            TurkishName = "Omlet"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Kaşar peyniri ile hazırlanmış lezzetli omlet.",
                            IsDeleted = false,
                            Name = "Omelette with Gorgonzola Cheese",
                            Price = 55m,
                            TurkishName = "Kaşarlı Omlet"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "Peynir, domates, biber ve diğer malzemelerle hazırlanmış karışık omlet.",
                            IsDeleted = false,
                            Name = "Mixed Omelette",
                            Price = 80m,
                            TurkishName = "Karışık Omlet"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Domates, yeşil biber ve yumurta ile hazırlanan geleneksel Türk kahvaltı yemeği.",
                            IsDeleted = false,
                            Name = "Scrambled Eggs with Tomatoes and Green Pepper",
                            Price = 62.50m,
                            TurkishName = "Menemen"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "Kızarmış sucuk parçaları ile pişirilmiş yumurta.",
                            IsDeleted = false,
                            Name = "Scrambled Eggs with Garlic Sausages",
                            Price = 80m,
                            TurkishName = "Sucuklu Yumurta"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Karadeniz bölgesine özgü, mısır unu ve eritilmiş peynir ile hazırlanan geleneksel yemek.",
                            IsDeleted = false,
                            Name = "Melted Cheese and Cornmeal",
                            Price = 100m,
                            TurkishName = "Mıhlama"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "İnce dilimlenmiş pastırma ile pişirilmiş yumurta.",
                            IsDeleted = false,
                            Name = "Scrambled Eggs with Pastrami",
                            Price = 75m,
                            TurkishName = "Pastırmalı Yumurta"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "Sahanda kızartılmış dilimlenmiş sucuk.",
                            IsDeleted = false,
                            Name = "Fried Garlic Sausage",
                            Price = 85m,
                            TurkishName = "Sahanda Sucuk"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Description = "Kızarmış taze patates.",
                            IsDeleted = false,
                            Name = "French Fries",
                            Price = 40m,
                            TurkishName = "Patates Tava"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Description = "İçi peynirli mini kalem börekleri.",
                            IsDeleted = false,
                            Name = "Rolled Pastry",
                            Price = 40m,
                            TurkishName = "Mini Kalem Böreği"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            Description = "Taze kaymak ve organik bal ile servis edilir.",
                            IsDeleted = false,
                            Name = "Honey & Clotted Cream",
                            Price = 60m,
                            TurkishName = "Bal & Kaymak"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            Description = "Taze tereyağı porsiyonu.",
                            IsDeleted = false,
                            Name = "A Serving of Butter",
                            Price = 47.50m,
                            TurkishName = "Tereyağı Porsiyonu"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            Description = "Doğranmış domates, salatalık ve yeşilliklerden oluşan söğüş tabağı.",
                            IsDeleted = false,
                            Name = "Tomato and Cucumber",
                            Price = 47.50m,
                            TurkishName = "Söğüş Tabağı"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            Description = "Mevsim meyvelerinden oluşan tabak.",
                            IsDeleted = false,
                            Name = "Fruit Platter",
                            Price = 55m,
                            TurkishName = "Meyve Tabağı"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            Description = "Pirinç ve baharatlarla doldurulmuş taze biberler.",
                            IsDeleted = false,
                            Name = "Stuffed Peppers",
                            Price = 57.50m,
                            TurkishName = "Biber Dolma"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 2,
                            Description = "Özel sos ile hazırlanmış patlıcan yemeği.",
                            IsDeleted = false,
                            Name = "Sauced Aubergine",
                            Price = 57.50m,
                            TurkishName = "Soslu Patlıcan"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 2,
                            Description = "Zeytinyağlı enginar yemeği.",
                            IsDeleted = false,
                            Name = "Artichoke",
                            Price = 57.50m,
                            TurkishName = "Enginar"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 2,
                            Description = "Zeytinyağlı taze fasulye yemeği.",
                            IsDeleted = false,
                            Name = "Green Beans",
                            Price = 57.50m,
                            TurkishName = "Taze Fasulye"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            Description = "Pirinç ve baharatlarla doldurulmuş asma yaprağı sarması.",
                            IsDeleted = false,
                            Name = "Stuffed Vine Leaves",
                            Price = 57.50m,
                            TurkishName = "Yaprak Sarma"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 2,
                            Description = "Çeşitli zeytinyağlı yemeklerden oluşan tabak.",
                            IsDeleted = false,
                            Name = "Assorted Olive Oil Dish Platter",
                            Price = 80m,
                            TurkishName = "Zeytinyağı Tabağı"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 3,
                            Description = "Taze patateslerden hazırlanmış kızartma.",
                            IsDeleted = false,
                            Name = "Fresh Fries",
                            Price = 40m,
                            TurkishName = "Patates Tava"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 3,
                            Description = "İçi pastırma ile doldurulmuş çıtır börek.",
                            IsDeleted = false,
                            Name = "Pastrami Pastry",
                            Price = 67.50m,
                            TurkishName = "Paçanga Böreği"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 3,
                            Description = "Fırında kaşar peyniri ile gratine edilmiş mantar.",
                            IsDeleted = false,
                            Name = "Mushroom Gratin",
                            Price = 75m,
                            TurkishName = "Mantar Graten"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 3,
                            Description = "Tereyağında kavrulmuş taze mantarlar.",
                            IsDeleted = false,
                            Name = "Fried Mushrooms",
                            Price = 55m,
                            TurkishName = "Mantar Kavurma"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 3,
                            Description = "İnce doğranmış dil balığından hazırlanan özel sote.",
                            IsDeleted = false,
                            Name = "Julienne Sole Fish",
                            Price = 210m,
                            TurkishName = "Julyen Dil Balığı"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 4,
                            Description = "550-650 gr ağırlığında ızgara çipura balığı.",
                            IsDeleted = false,
                            Name = "Grilled Sea Bream 550 - 650 gr.",
                            Price = 550m,
                            TurkishName = "Çipura Izgara 550 - 650 gr."
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 4,
                            Description = "300-350 gr ağırlığında ızgara çipura balığı.",
                            IsDeleted = false,
                            Name = "Grilled Sea Bream 300 - 350 gr.",
                            Price = 310m,
                            TurkishName = "Çipura Izgara 300 - 350 gr."
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 4,
                            Description = "Un ile kaplanıp kızartılmış mezgit balığı.",
                            IsDeleted = false,
                            Name = "Fried Whiting Fish",
                            Price = 260m,
                            TurkishName = "Mezgit Tava"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 4,
                            Description = "Fesleğen sosu ile servis edilen ızgara somon balığı.",
                            IsDeleted = false,
                            Name = "Pan Seared Salmon",
                            Price = 415m,
                            TurkishName = "Fesleğen Soslu Somon Izgara"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 4,
                            Description = "Filetolanmış levrek balığı.",
                            IsDeleted = false,
                            Name = "Sea Bass Filleted",
                            Price = 400m,
                            TurkishName = "Levrek Fileto"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 4,
                            Description = "550-650 gr ağırlığında ızgara levrek balığı.",
                            IsDeleted = false,
                            Name = "Grilled Sea Bass 550 - 650 gr.",
                            Price = 550m,
                            TurkishName = "Levrek Izgara 550 - 650 gr."
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 4,
                            Description = "300-350 gr ağırlığında ızgara levrek balığı.",
                            IsDeleted = false,
                            Name = "Grilled Sea Bass 300 - 350 gr.",
                            Price = 300m,
                            TurkishName = "Levrek Izgara 300 - 350 gr."
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 4,
                            Description = "Kiremit üzerinde özel soslar ile pişirilmiş levrek balığı.",
                            IsDeleted = false,
                            Name = "Sea Bass on the Clay Tile",
                            Price = 415m,
                            TurkishName = "Kiremitte Levrek"
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 4,
                            Description = "Taze ızgara somon balığı.",
                            IsDeleted = false,
                            Name = "Broiled Salmon Steak",
                            Price = 400m,
                            TurkishName = "Somon Izgara"
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 4,
                            Description = "Izgara edilmiş dil balığı.",
                            IsDeleted = false,
                            Name = "Grilled Sole Fish",
                            Price = 270m,
                            TurkishName = "Dil Balığı Izgara"
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 4,
                            Description = "Özel soslar ile kavrulmuş somon balığı.",
                            IsDeleted = false,
                            Name = "Baked Salmon",
                            Price = 415m,
                            TurkishName = "Somon Kavurma"
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 5,
                            Description = "Mevsiminde taze istavrit balığı.",
                            IsDeleted = false,
                            Name = "Horse Mackerel",
                            Price = 285m,
                            TurkishName = "İstavrit"
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 5,
                            Description = "Taze sarıkanat balığı.",
                            IsDeleted = false,
                            Name = "Blue Fish",
                            Price = 295m,
                            TurkishName = "Sarıkanat"
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 5,
                            Description = "Mevsiminde taze palamut balığı.",
                            IsDeleted = false,
                            Name = "Bonito",
                            Price = 340m,
                            TurkishName = "Palamut"
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 5,
                            Description = "Mısır unu ile kaplanıp kızartılmış hamsi balığı.",
                            IsDeleted = false,
                            Name = "Fried Anchovies",
                            Price = 250m,
                            TurkishName = "Hamsi Tava"
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 5,
                            Description = "Taze mezgit balığı.",
                            IsDeleted = false,
                            Name = "Whiting Fish",
                            Price = 270m,
                            TurkishName = "Mezgit"
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 5,
                            Description = "Taze tekir balığı.",
                            IsDeleted = false,
                            Name = "Red Mullet",
                            Price = 290m,
                            TurkishName = "Tekir"
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 5,
                            Description = "Mevsiminde taze lüfer balığı.",
                            IsDeleted = false,
                            Name = "Loufer",
                            Price = 375m,
                            TurkishName = "Lüfer"
                        },
                        new
                        {
                            Id = 48,
                            CategoryId = 6,
                            Description = "Özel baharatlarla hazırlanmış ızgara köfte.",
                            IsDeleted = false,
                            Name = "Grilled Köfte",
                            Price = 200m,
                            TurkishName = "Köfte Izgara"
                        },
                        new
                        {
                            Id = 49,
                            CategoryId = 6,
                            Description = "Kaşar peyniri ile servis edilen ızgara köfte.",
                            IsDeleted = false,
                            Name = "Grilled Köfte with Cheese",
                            Price = 210m,
                            TurkishName = "Kaşarlı Köfte Izgara"
                        },
                        new
                        {
                            Id = 50,
                            CategoryId = 6,
                            Description = "Özel marine edilmiş tavuk şiş.",
                            IsDeleted = false,
                            Name = "Chicken Shish",
                            Price = 130m,
                            TurkishName = "Piliç Izgara"
                        },
                        new
                        {
                            Id = 51,
                            CategoryId = 6,
                            Description = "Özel baharatlarla kavurulmuş tavuk parçaları.",
                            IsDeleted = false,
                            Name = "Roasting Chicken",
                            Price = 145m,
                            TurkishName = "Piliç Kavurma"
                        },
                        new
                        {
                            Id = 52,
                            CategoryId = 6,
                            Description = "Közlenmiş patlıcan ezmesi üzerinde julyen doğranmış tavuk parçaları.",
                            IsDeleted = false,
                            Name = "Chicken Julienne with Eggplant Purée",
                            Price = 145m,
                            TurkishName = "Beğendili Julyen Piliç"
                        },
                        new
                        {
                            Id = 53,
                            CategoryId = 6,
                            Description = "Tercihe göre pişirilmiş dana bonfile.",
                            IsDeleted = false,
                            Name = "Veal Fillet",
                            Price = 390m,
                            TurkishName = "Bonfile"
                        },
                        new
                        {
                            Id = 54,
                            CategoryId = 6,
                            Description = "Kaşar peyniri ile servis edilen dana bonfile.",
                            IsDeleted = false,
                            Name = "Veal Fillet with Turkish Cheese",
                            Price = 400m,
                            TurkishName = "Kaşarlı Bonfile"
                        },
                        new
                        {
                            Id = 55,
                            CategoryId = 6,
                            Description = "Közlenmiş patlıcan ezmesi üzerinde julyen doğranmış dana bonfile.",
                            IsDeleted = false,
                            Name = "Steak Fillet Julienne with Eggplant Purée",
                            Price = 400m,
                            TurkishName = "Beğendili Julyen Bonfile"
                        },
                        new
                        {
                            Id = 56,
                            CategoryId = 6,
                            Description = "Köfte, pirzola, tavuk ve diğer etlerin ızgara karışımı.",
                            IsDeleted = false,
                            Name = "Mixed Grill",
                            Price = 390m,
                            TurkishName = "Karışık Izgara"
                        },
                        new
                        {
                            Id = 57,
                            CategoryId = 6,
                            Description = "Sebzeler ile hazırlanmış özel kavurma.",
                            IsDeleted = false,
                            Name = "Shepherd's Roasting",
                            Price = 325m,
                            TurkishName = "Çoban Kavurma"
                        },
                        new
                        {
                            Id = 58,
                            CategoryId = 7,
                            Description = "Geleneksel fırında pişirilmiş sütlaç.",
                            IsDeleted = false,
                            Name = "Sütlaç",
                            Price = 55m,
                            TurkishName = "Sütlaç"
                        },
                        new
                        {
                            Id = 59,
                            CategoryId = 7,
                            Description = "Üç farklı süt ile hazırlanmış özel tatlı.",
                            IsDeleted = false,
                            Name = "Tres Leches Cake",
                            Price = 55m,
                            TurkishName = "Trileçe"
                        },
                        new
                        {
                            Id = 60,
                            CategoryId = 7,
                            Description = "Geleneksel aşure tatlısı.",
                            IsDeleted = false,
                            Name = "Noah's Pudding",
                            Price = 55m,
                            TurkishName = "Aşure"
                        },
                        new
                        {
                            Id = 61,
                            CategoryId = 7,
                            Description = "Çikolata sosu ile servis edilen profiterol.",
                            IsDeleted = false,
                            Name = "Profiterole",
                            Price = 55m,
                            TurkishName = "Profiterol"
                        },
                        new
                        {
                            Id = 62,
                            CategoryId = 7,
                            Description = "Sıcak çikolata sosu ile servis edilen özel tatlı.",
                            IsDeleted = false,
                            Name = "Volcanic",
                            Price = 80m,
                            TurkishName = "Volkanik"
                        },
                        new
                        {
                            Id = 63,
                            CategoryId = 7,
                            Description = "Mevsim meyveleriyle hazırlanmış tatlı çeşitleri.",
                            IsDeleted = false,
                            Name = "Fruit Dessert",
                            Price = 60m,
                            TurkishName = "Meyveli Tatlılar"
                        },
                        new
                        {
                            Id = 64,
                            CategoryId = 7,
                            Description = "Geleneksel hamur işi tatlılar.",
                            IsDeleted = false,
                            Name = "Pastries",
                            Price = 60m,
                            TurkishName = "Hamur İşi Tatlıları"
                        },
                        new
                        {
                            Id = 65,
                            CategoryId = 7,
                            Description = "Çeşitli aromalarda dondurma porsiyonu.",
                            IsDeleted = false,
                            Name = "Ice Cream",
                            Price = 47.50m,
                            TurkishName = "Dondurma Porsiyon"
                        },
                        new
                        {
                            Id = 66,
                            CategoryId = 7,
                            Description = "Mevsim meyvelerinden hazırlanmış meyve tabağı.",
                            IsDeleted = false,
                            Name = "Mixed Fruits",
                            Price = 55m,
                            TurkishName = "Meyve Tabağı"
                        },
                        new
                        {
                            Id = 67,
                            CategoryId = 7,
                            Description = "Tahin ile hazırlanmış geleneksel tatlı.",
                            IsDeleted = false,
                            Name = "Tahini Bread Roll",
                            Price = 67.50m,
                            TurkishName = "Tahinli Sarma"
                        },
                        new
                        {
                            Id = 68,
                            CategoryId = 8,
                            Description = "Kutu içecek çeşitleri.",
                            IsDeleted = false,
                            Name = "Canned Soft Drinks",
                            Price = 55m,
                            TurkishName = "Meşrubat Çeşitleri"
                        },
                        new
                        {
                            Id = 69,
                            CategoryId = 8,
                            Description = "Geleneksel yoğurt içeceği.",
                            IsDeleted = false,
                            Name = "Ayran",
                            Price = 16m,
                            TurkishName = "Ayran"
                        },
                        new
                        {
                            Id = 70,
                            CategoryId = 8,
                            Description = "Maden suyu.",
                            IsDeleted = false,
                            Name = "Mineral Water",
                            Price = 16m,
                            TurkishName = "Soda"
                        },
                        new
                        {
                            Id = 71,
                            CategoryId = 8,
                            Description = "Çeşitli aromalarda meyveli maden suyu.",
                            IsDeleted = false,
                            Name = "Frute Mineral Water",
                            Price = 19m,
                            TurkishName = "Meyveli Soda"
                        },
                        new
                        {
                            Id = 72,
                            CategoryId = 8,
                            Description = "Taze sıkılmış portakal veya nar suyu.",
                            IsDeleted = false,
                            Name = "Orange / Pomegranate Juice",
                            Price = 55m,
                            TurkishName = "Sıkma Portakal / Nar Suyu"
                        },
                        new
                        {
                            Id = 73,
                            CategoryId = 8,
                            Description = "Geleneksel nar çiçeği şerbeti.",
                            IsDeleted = false,
                            Name = "Nar Çiçeği Şerbeti",
                            Price = 55m,
                            TurkishName = "Nar Çiçeği Şerbeti"
                        },
                        new
                        {
                            Id = 74,
                            CategoryId = 8,
                            Description = "Demli Türk çayı.",
                            IsDeleted = false,
                            Name = "Tea",
                            Price = 10m,
                            TurkishName = "Çay"
                        },
                        new
                        {
                            Id = 75,
                            CategoryId = 8,
                            Description = "Nescafe, sade veya sütlü olarak servis edilir.",
                            IsDeleted = false,
                            Name = "Instant Coffee",
                            Price = 40m,
                            TurkishName = "Hazır Kahve"
                        },
                        new
                        {
                            Id = 76,
                            CategoryId = 8,
                            Description = "Geleneksel köpüklü Türk kahvesi.",
                            IsDeleted = false,
                            Name = "Turkish Coffee",
                            Price = 40m,
                            TurkishName = "Türk Kahvesi"
                        },
                        new
                        {
                            Id = 77,
                            CategoryId = 8,
                            Description = "Taze çekilmiş kahve çekirdeklerinden hazırlanmış filtre kahve.",
                            IsDeleted = false,
                            Name = "Filter Coffee",
                            Price = 47.50m,
                            TurkishName = "Filtre Kahve"
                        },
                        new
                        {
                            Id = 78,
                            CategoryId = 8,
                            Description = "0.5L içme suyu.",
                            IsDeleted = false,
                            Name = "Water",
                            Price = 8m,
                            TurkishName = "Su"
                        });
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurkishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Breakfast",
                            TurkishName = "Kahvaltı"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "OliveOilDishes",
                            TurkishName = "Zeytinyağlılar"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "HotAppetizers",
                            TurkishName = "Ara Sıcaklar"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Types of Fish",
                            TurkishName = "Balık Çeşitleri"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "SeasonalFish",
                            TurkishName = "Mevsim Balıkları"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "TypesofGrillDishes",
                            TurkishName = "Izgara ve Kavurmalar"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Dessert",
                            TurkishName = "Tatlılar"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Drinks",
                            TurkishName = "İçecekler"
                        });
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FoodId = 1,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/KahvaltiTabagi.jpg"
                        },
                        new
                        {
                            Id = 2,
                            FoodId = 2,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/SerpmeKahvalti.jpg"
                        },
                        new
                        {
                            Id = 3,
                            FoodId = 3,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/PeynirTabagi.jpeg"
                        },
                        new
                        {
                            Id = 4,
                            FoodId = 4,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/ZeytinTabagi.jpeg"
                        },
                        new
                        {
                            Id = 5,
                            FoodId = 5,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/Omlet.jpg"
                        },
                        new
                        {
                            Id = 6,
                            FoodId = 6,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/KasarliOmlet.jpg"
                        },
                        new
                        {
                            Id = 7,
                            FoodId = 7,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/KarisikOmlet.jpg"
                        },
                        new
                        {
                            Id = 8,
                            FoodId = 8,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/Menemen.jpg"
                        },
                        new
                        {
                            Id = 9,
                            FoodId = 9,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/SucukluYumurta.jpeg"
                        },
                        new
                        {
                            Id = 10,
                            FoodId = 10,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/Mihlama.jpg"
                        },
                        new
                        {
                            Id = 11,
                            FoodId = 11,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/PastirmaliYumurta.jpg"
                        },
                        new
                        {
                            Id = 12,
                            FoodId = 12,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/SahandaSucuk.jpg"
                        },
                        new
                        {
                            Id = 13,
                            FoodId = 13,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/PatatesTava.jpg"
                        },
                        new
                        {
                            Id = 14,
                            FoodId = 14,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/MiniKalemBoregi.jpg"
                        },
                        new
                        {
                            Id = 15,
                            FoodId = 15,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/BalKaymak.jpg"
                        },
                        new
                        {
                            Id = 16,
                            FoodId = 16,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/TereyagiPorsiyonu.jpg"
                        },
                        new
                        {
                            Id = 17,
                            FoodId = 17,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/SogusTabagi.jpg"
                        },
                        new
                        {
                            Id = 18,
                            FoodId = 18,
                            IsDeleted = false,
                            Path = "/img/Food/Breakfast/MeyveTabagi.jpg"
                        },
                        new
                        {
                            Id = 19,
                            FoodId = 19,
                            IsDeleted = false,
                            Path = "/img/Food/OliveOilDishes/biberdolmasi.jpg"
                        },
                        new
                        {
                            Id = 20,
                            FoodId = 20,
                            IsDeleted = false,
                            Path = "/img/Food/OliveOilDishes/soslupatlican.jpg"
                        },
                        new
                        {
                            Id = 21,
                            FoodId = 21,
                            IsDeleted = false,
                            Path = "/img/Food/OliveOilDishes/enginar.jpg"
                        },
                        new
                        {
                            Id = 22,
                            FoodId = 22,
                            IsDeleted = false,
                            Path = "/img/Food/OliveOilDishes/tazefasulye.jpg"
                        },
                        new
                        {
                            Id = 23,
                            FoodId = 23,
                            IsDeleted = false,
                            Path = "/img/Food/OliveOilDishes/yapraksarma.jpg"
                        },
                        new
                        {
                            Id = 24,
                            FoodId = 24,
                            IsDeleted = false,
                            Path = "/img/Food/OliveOilDishes/zeytinyagitabagi.jpg"
                        },
                        new
                        {
                            Id = 25,
                            FoodId = 25,
                            IsDeleted = false,
                            Path = "/img/Food/HotAppetizers/patatestava.jpg"
                        },
                        new
                        {
                            Id = 26,
                            FoodId = 26,
                            IsDeleted = false,
                            Path = "/img/Food/HotAppetizers/pacangaboregi.jpg"
                        },
                        new
                        {
                            Id = 27,
                            FoodId = 27,
                            IsDeleted = false,
                            Path = "/img/Food/HotAppetizers/mantargraten.jpg"
                        },
                        new
                        {
                            Id = 28,
                            FoodId = 28,
                            IsDeleted = false,
                            Path = "/img/Food/HotAppetizers/mantarkavurma.jpg"
                        },
                        new
                        {
                            Id = 29,
                            FoodId = 29,
                            IsDeleted = false,
                            Path = "/img/Food/HotAppetizers/julyendilbaligi.jpg"
                        },
                        new
                        {
                            Id = 30,
                            FoodId = 30,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/cipuraizgara.jpg"
                        },
                        new
                        {
                            Id = 31,
                            FoodId = 31,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/cipuraizgarabuyuk.jpg"
                        },
                        new
                        {
                            Id = 32,
                            FoodId = 32,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/mezgittava.jpg"
                        },
                        new
                        {
                            Id = 33,
                            FoodId = 33,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/feslegenlisomonizgara.jpg"
                        },
                        new
                        {
                            Id = 34,
                            FoodId = 34,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/levrekfileto.jpg"
                        },
                        new
                        {
                            Id = 35,
                            FoodId = 35,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/levrekizgara.jpg"
                        },
                        new
                        {
                            Id = 36,
                            FoodId = 36,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/levrekizgarabuyuk.jpg"
                        },
                        new
                        {
                            Id = 37,
                            FoodId = 37,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/kiremittelevrek.jpg"
                        },
                        new
                        {
                            Id = 38,
                            FoodId = 38,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/somonizgara.jpg"
                        },
                        new
                        {
                            Id = 39,
                            FoodId = 39,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/dilbaligiizgara.jpg"
                        },
                        new
                        {
                            Id = 40,
                            FoodId = 40,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofFish/somonkavurma.jpg"
                        },
                        new
                        {
                            Id = 41,
                            FoodId = 41,
                            IsDeleted = false,
                            Path = "/img/Food/SeasonalFish/istavrit.jpg"
                        },
                        new
                        {
                            Id = 42,
                            FoodId = 42,
                            IsDeleted = false,
                            Path = "/img/Food/SeasonalFish/sarikanat.jpg"
                        },
                        new
                        {
                            Id = 43,
                            FoodId = 43,
                            IsDeleted = false,
                            Path = "/img/Food/SeasonalFish/palamut.jpg"
                        },
                        new
                        {
                            Id = 44,
                            FoodId = 44,
                            IsDeleted = false,
                            Path = "/img/Food/SeasonalFish/hamsitava.jpg"
                        },
                        new
                        {
                            Id = 45,
                            FoodId = 45,
                            IsDeleted = false,
                            Path = "/img/Food/SeasonalFish/mezgit.jpg"
                        },
                        new
                        {
                            Id = 46,
                            FoodId = 46,
                            IsDeleted = false,
                            Path = "/img/Food/SeasonalFish/tekir.jpg"
                        },
                        new
                        {
                            Id = 47,
                            FoodId = 47,
                            IsDeleted = false,
                            Path = "/img/Food/SeasonalFish/lufer.jpg"
                        },
                        new
                        {
                            Id = 48,
                            FoodId = 48,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/kofteizgara.jpg"
                        },
                        new
                        {
                            Id = 49,
                            FoodId = 49,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/kasarlikofteizgara.jpg"
                        },
                        new
                        {
                            Id = 50,
                            FoodId = 50,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/pilicizgara.jpg"
                        },
                        new
                        {
                            Id = 51,
                            FoodId = 51,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/pilickavurma.jpg"
                        },
                        new
                        {
                            Id = 52,
                            FoodId = 52,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/begendilijulyenpilic.jpg"
                        },
                        new
                        {
                            Id = 53,
                            FoodId = 53,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/bonfile.jpg"
                        },
                        new
                        {
                            Id = 54,
                            FoodId = 54,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/kasarlibonfile.jpg"
                        },
                        new
                        {
                            Id = 55,
                            FoodId = 55,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/begendilijulyenbonfile.jpg"
                        },
                        new
                        {
                            Id = 56,
                            FoodId = 56,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/karisikizgara.jpg"
                        },
                        new
                        {
                            Id = 57,
                            FoodId = 57,
                            IsDeleted = false,
                            Path = "/img/Food/TypesofGrillDishes/cobankavurma.jpg"
                        },
                        new
                        {
                            Id = 58,
                            FoodId = 58,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/sutlac.jpg"
                        },
                        new
                        {
                            Id = 59,
                            FoodId = 59,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/trilece.jpg"
                        },
                        new
                        {
                            Id = 60,
                            FoodId = 60,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/asure.jpg"
                        },
                        new
                        {
                            Id = 61,
                            FoodId = 61,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/profiterol.jpg"
                        },
                        new
                        {
                            Id = 62,
                            FoodId = 62,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/volkanik.jpg"
                        },
                        new
                        {
                            Id = 63,
                            FoodId = 63,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/meyvelitatlilar.jpg"
                        },
                        new
                        {
                            Id = 64,
                            FoodId = 64,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/hamurisitatlilari.jpg"
                        },
                        new
                        {
                            Id = 65,
                            FoodId = 65,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/dondurmaporsiyon.jpg"
                        },
                        new
                        {
                            Id = 66,
                            FoodId = 66,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/meyvetabagi.jpg"
                        },
                        new
                        {
                            Id = 67,
                            FoodId = 67,
                            IsDeleted = false,
                            Path = "/img/Food/Dessert/tahinlisarma.jpg"
                        },
                        new
                        {
                            Id = 68,
                            FoodId = 68,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/mesrubatcesitleri.jpg"
                        },
                        new
                        {
                            Id = 69,
                            FoodId = 69,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/ayran.jpg"
                        },
                        new
                        {
                            Id = 70,
                            FoodId = 70,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/soda.jpg"
                        },
                        new
                        {
                            Id = 71,
                            FoodId = 71,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/meyvelisoda.jpg"
                        },
                        new
                        {
                            Id = 72,
                            FoodId = 72,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/sikmaportakalnarsuyu.jpg"
                        },
                        new
                        {
                            Id = 73,
                            FoodId = 73,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/narcicegiserbeti.jpg"
                        },
                        new
                        {
                            Id = 74,
                            FoodId = 74,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/cay.jpg"
                        },
                        new
                        {
                            Id = 75,
                            FoodId = 75,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/hazirkahve.jpg"
                        },
                        new
                        {
                            Id = 76,
                            FoodId = 76,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/turkkahvesi.jpg"
                        },
                        new
                        {
                            Id = 77,
                            FoodId = 77,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/filtrekahve.jpg"
                        },
                        new
                        {
                            Id = 78,
                            FoodId = 78,
                            IsDeleted = false,
                            Path = "/img/Food/Drinks/su.jpg"
                        });
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Guests")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            IsOccupied = false,
                            IsPaid = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestERP.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Food", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.FoodCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Image", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.Food", "Food")
                        .WithMany("Images")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Order", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestERP.Core.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("RestERP.Core.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Food", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("RestERP.Core.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
